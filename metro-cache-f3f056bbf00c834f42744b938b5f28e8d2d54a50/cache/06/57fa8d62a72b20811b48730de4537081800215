__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isFunction = require(_dependencyMap[2], './isFunction');

  var getTypeName = require(_dependencyMap[3], './getTypeName');

  var isIdentity = require(_dependencyMap[4], './isIdentity');

  var isArray = require(_dependencyMap[5], './isArray');

  var create = require(_dependencyMap[6], './create');

  var is = require(_dependencyMap[7], './is');

  var forbidNewOperator = require(_dependencyMap[8], './forbidNewOperator');

  var isUnion = require(_dependencyMap[9], './isUnion');

  var isNil = require(_dependencyMap[10], './isNil');

  function getDefaultName(types) {
    return types.map(getTypeName).join(' | ');
  }

  function union(types, name) {
    if (process.env.NODE_ENV !== 'production') {
      assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
        return 'Invalid argument types ' + assert.stringify(types) + ' supplied to union(types, [name]) combinator (expected an array of at least 2 types)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to union(types, [name]) combinator (expected a string)';
      });
    }

    var displayName = name || getDefaultName(types);
    var identity = types.every(isIdentity);

    function Union(value, path) {
      if (process.env.NODE_ENV === 'production') {
        if (identity) {
          return value;
        }
      }

      var type = Union.dispatch(value);

      if (!type && Union.is(value)) {
        return value;
      }

      if (process.env.NODE_ENV !== 'production') {
        if (identity) {
          forbidNewOperator(this, Union);
        }

        path = path || [displayName];
        assert(isFunction(type), function () {
          return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (no constructor returned by dispatch)';
        });
        path[path.length - 1] += '(' + getTypeName(type) + ')';
      }

      return create(type, value, path);
    }

    Union.meta = {
      kind: 'union',
      types: types,
      name: name,
      identity: identity
    };
    Union.displayName = displayName;

    Union.is = function (x) {
      return types.some(function (type) {
        return is(x, type);
      });
    };

    Union.dispatch = function (x) {
      for (var i = 0, len = types.length; i < len; i++) {
        var type = types[i];

        if (isUnion(type)) {
          var t = type.dispatch(x);

          if (!isNil(t)) {
            return t;
          }
        } else if (is(x, type)) {
          return type;
        }
      }
    };

    Union.update = function (instance, patch) {
      return Union(assert.update(instance, patch));
    };

    return Union;
  }

  union.getDefaultName = getDefaultName;
  module.exports = union;
});