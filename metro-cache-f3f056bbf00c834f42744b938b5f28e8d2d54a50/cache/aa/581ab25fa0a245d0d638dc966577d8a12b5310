__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isFunction = require(_dependencyMap[2], './isFunction');

  var isMaybe = require(_dependencyMap[3], './isMaybe');

  var isIdentity = require(_dependencyMap[4], './isIdentity');

  var Any = require(_dependencyMap[5], './Any');

  var create = require(_dependencyMap[6], './create');

  var Nil = require(_dependencyMap[7], './Nil');

  var forbidNewOperator = require(_dependencyMap[8], './forbidNewOperator');

  var is = require(_dependencyMap[9], './is');

  var getTypeName = require(_dependencyMap[10], './getTypeName');

  function getDefaultName(type) {
    return '?' + getTypeName(type);
  }

  function maybe(type, name) {
    if (isMaybe(type) || type === Any || type === Nil) {
      return type;
    }

    if (process.env.NODE_ENV !== 'production') {
      assert(isFunction(type), function () {
        return 'Invalid argument type ' + assert.stringify(type) + ' supplied to maybe(type, [name]) combinator (expected a type)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to maybe(type, [name]) combinator (expected a string)';
      });
    }

    var displayName = name || getDefaultName(type);
    var identity = isIdentity(type);

    function Maybe(value, path) {
      if (process.env.NODE_ENV !== 'production') {
        if (identity) {
          forbidNewOperator(this, Maybe);
        }
      }

      return Nil.is(value) ? value : create(type, value, path);
    }

    Maybe.meta = {
      kind: 'maybe',
      type: type,
      name: name,
      identity: identity
    };
    Maybe.displayName = displayName;

    Maybe.is = function (x) {
      return Nil.is(x) || is(x, type);
    };

    return Maybe;
  }

  maybe.getDefaultName = getDefaultName;
  module.exports = maybe;
});