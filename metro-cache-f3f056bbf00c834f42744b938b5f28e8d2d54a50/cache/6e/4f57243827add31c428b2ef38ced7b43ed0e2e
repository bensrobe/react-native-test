__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isFunction = require(_dependencyMap[2], './isFunction');

  var getTypeName = require(_dependencyMap[3], './getTypeName');

  var isIdentity = require(_dependencyMap[4], './isIdentity');

  var create = require(_dependencyMap[5], './create');

  var is = require(_dependencyMap[6], './is');

  var isArray = require(_dependencyMap[7], './isArray');

  function getDefaultName(type) {
    return 'Array<' + getTypeName(type) + '>';
  }

  function list(type, name) {
    if (process.env.NODE_ENV !== 'production') {
      assert(isFunction(type), function () {
        return 'Invalid argument type ' + assert.stringify(type) + ' supplied to list(type, [name]) combinator (expected a type)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to list(type, [name]) combinator (expected a string)';
      });
    }

    var displayName = name || getDefaultName(type);
    var typeNameCache = getTypeName(type);
    var identity = isIdentity(type);

    function List(value, path) {
      if (process.env.NODE_ENV === 'production') {
        if (identity) {
          return value;
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        path = path || [displayName];
        assert(isArray(value), function () {
          return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/') + ' (expected an array of ' + typeNameCache + ')';
        });
      }

      var idempotent = true;
      var ret = [];

      for (var i = 0, len = value.length; i < len; i++) {
        var actual = value[i];
        var instance = create(type, actual, process.env.NODE_ENV !== 'production' ? path.concat(i + ': ' + typeNameCache) : null);
        idempotent = idempotent && actual === instance;
        ret.push(instance);
      }

      if (idempotent) {
        ret = value;
      }

      if (process.env.NODE_ENV !== 'production') {
        Object.freeze(ret);
      }

      return ret;
    }

    List.meta = {
      kind: 'list',
      type: type,
      name: name,
      identity: identity
    };
    List.displayName = displayName;

    List.is = function (x) {
      return isArray(x) && x.every(function (e) {
        return is(e, type);
      });
    };

    List.update = function (instance, patch) {
      return List(assert.update(instance, patch));
    };

    return List;
  }

  list.getDefaultName = getDefaultName;
  module.exports = list;
});