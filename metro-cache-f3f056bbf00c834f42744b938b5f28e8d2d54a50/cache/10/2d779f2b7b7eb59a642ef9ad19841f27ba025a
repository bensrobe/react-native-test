__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isFunction = require(_dependencyMap[2], './isFunction');

  var forbidNewOperator = require(_dependencyMap[3], './forbidNewOperator');

  var isIdentity = require(_dependencyMap[4], './isIdentity');

  var create = require(_dependencyMap[5], './create');

  var is = require(_dependencyMap[6], './is');

  var getTypeName = require(_dependencyMap[7], './getTypeName');

  var getFunctionName = require(_dependencyMap[8], './getFunctionName');

  function getDefaultName(type, predicate) {
    return '{' + getTypeName(type) + ' | ' + getFunctionName(predicate) + '}';
  }

  function refinement(type, predicate, name) {
    if (process.env.NODE_ENV !== 'production') {
      assert(isFunction(type), function () {
        return 'Invalid argument type ' + assert.stringify(type) + ' supplied to refinement(type, predicate, [name]) combinator (expected a type)';
      });
      assert(isFunction(predicate), function () {
        return 'Invalid argument predicate supplied to refinement(type, predicate, [name]) combinator (expected a function)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to refinement(type, predicate, [name]) combinator (expected a string)';
      });
    }

    var displayName = name || getDefaultName(type, predicate);
    var identity = isIdentity(type);

    function Refinement(value, path) {
      if (process.env.NODE_ENV !== 'production') {
        if (identity) {
          forbidNewOperator(this, Refinement);
        }

        path = path || [displayName];
      }

      var x = create(type, value, path);

      if (process.env.NODE_ENV !== 'production') {
        assert(predicate(x), function () {
          return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
        });
      }

      return x;
    }

    Refinement.meta = {
      kind: 'subtype',
      type: type,
      predicate: predicate,
      name: name,
      identity: identity
    };
    Refinement.displayName = displayName;

    Refinement.is = function (x) {
      return is(x, type) && predicate(x);
    };

    Refinement.update = function (instance, patch) {
      return Refinement(assert.update(instance, patch));
    };

    return Refinement;
  }

  refinement.getDefaultName = getDefaultName;
  module.exports = refinement;
});