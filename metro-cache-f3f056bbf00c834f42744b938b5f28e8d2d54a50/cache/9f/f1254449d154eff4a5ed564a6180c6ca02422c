__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isFunction = require(_dependencyMap[2], './isFunction');

  var isArray = require(_dependencyMap[3], './isArray');

  var forbidNewOperator = require(_dependencyMap[4], './isIdentity');

  var is = require(_dependencyMap[5], './is');

  var getTypeName = require(_dependencyMap[6], './getTypeName');

  var isIdentity = require(_dependencyMap[4], './isIdentity');

  function getDefaultName(types) {
    return types.map(getTypeName).join(' & ');
  }

  function intersection(types, name) {
    if (process.env.NODE_ENV !== 'production') {
      assert(isArray(types) && types.every(isFunction) && types.length >= 2, function () {
        return 'Invalid argument types ' + assert.stringify(types) + ' supplied to intersection(types, [name]) combinator (expected an array of at least 2 types)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to intersection(types, [name]) combinator (expected a string)';
      });
    }

    var displayName = name || getDefaultName(types);
    var identity = types.every(isIdentity);

    function Intersection(value, path) {
      if (process.env.NODE_ENV !== 'production') {
        if (identity) {
          forbidNewOperator(this, Intersection);
        }

        path = path || [displayName];
        assert(Intersection.is(value), function () {
          return 'Invalid value ' + assert.stringify(value) + ' supplied to ' + path.join('/');
        });
      }

      return value;
    }

    Intersection.meta = {
      kind: 'intersection',
      types: types,
      name: name,
      identity: identity
    };
    Intersection.displayName = displayName;

    Intersection.is = function (x) {
      return types.every(function (type) {
        return is(x, type);
      });
    };

    Intersection.update = function (instance, patch) {
      return Intersection(assert.update(instance, patch));
    };

    return Intersection;
  }

  intersection.getDefaultName = getDefaultName;
  module.exports = intersection;
});