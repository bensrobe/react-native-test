__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var isType = require(_dependencyMap[2], './isType');

  var isNil = require(_dependencyMap[3], './isNil');

  var mixin = require(_dependencyMap[4], './mixin');

  var getTypeName = require(_dependencyMap[5], './getTypeName');

  var isUnion = require(_dependencyMap[6], './isUnion');

  var nextDeclareUniqueId = 1;

  module.exports = function declare(name) {
    if (process.env.NODE_ENV !== 'production') {
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + name + ' supplied to declare([name]) (expected a string)';
      });
    }

    var type;

    function Declare(value, path) {
      if (process.env.NODE_ENV !== 'production') {
        assert(!isNil(type), function () {
          return 'Type declared but not defined, don\'t forget to call .define on every declared type';
        });

        if (isUnion(type)) {
          assert(type.dispatch === Declare.dispatch, function () {
            return 'Please define the custom ' + name + '.dispatch function before calling ' + name + '.define()';
          });
        }
      }

      return type(value, path);
    }

    Declare.define = function (spec) {
      if (process.env.NODE_ENV !== 'production') {
        assert(isType(spec), function () {
          return 'Invalid argument type ' + assert.stringify(spec) + ' supplied to define(type) (expected a type)';
        });
        assert(isNil(type), function () {
          return 'Declare.define(type) can only be invoked once';
        });
      }

      if (isUnion(spec) && Declare.hasOwnProperty('dispatch')) {
        spec.dispatch = Declare.dispatch;
      }

      type = spec;
      mixin(Declare, type, true);

      if (name) {
        type.displayName = Declare.displayName = name;
        Declare.meta.name = name;
      }

      Declare.meta.identity = type.meta.identity;
      Declare.prototype = type.prototype;
      return Declare;
    };

    Declare.displayName = name || getTypeName(Declare) + "$" + nextDeclareUniqueId++;
    Declare.meta = {
      identity: false
    };
    Declare.prototype = null;
    return Declare;
  };
});