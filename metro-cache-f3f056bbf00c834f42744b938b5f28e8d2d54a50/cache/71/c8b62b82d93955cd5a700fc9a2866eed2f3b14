__d(function (global, require, module, exports, _dependencyMap) {
  var assert = require(_dependencyMap[0], './assert');

  var isTypeName = require(_dependencyMap[1], './isTypeName');

  var String = require(_dependencyMap[2], './String');

  var Function = require(_dependencyMap[3], './Function');

  var isBoolean = require(_dependencyMap[4], './isBoolean');

  var isObject = require(_dependencyMap[5], './isObject');

  var isNil = require(_dependencyMap[6], './isNil');

  var create = require(_dependencyMap[7], './create');

  var getTypeName = require(_dependencyMap[8], './getTypeName');

  var dict = require(_dependencyMap[9], './dict');

  var getDefaultInterfaceName = require(_dependencyMap[10], './getDefaultInterfaceName');

  var isIdentity = require(_dependencyMap[11], './isIdentity');

  var is = require(_dependencyMap[12], './is');

  var extend = require(_dependencyMap[13], './extend');

  var assign = require(_dependencyMap[14], './assign');

  function extendInterface(mixins, name) {
    return extend(inter, mixins, name);
  }

  function getOptions(options) {
    if (!isObject(options)) {
      options = isNil(options) ? {} : {
        name: options
      };
    }

    if (!options.hasOwnProperty('strict')) {
      options.strict = inter.strict;
    }

    return options;
  }

  function inter(props, options) {
    options = getOptions(options);
    var name = options.name;
    var strict = options.strict;

    if (process.env.NODE_ENV !== 'production') {
      assert(dict(String, Function).is(props), function () {
        return 'Invalid argument props ' + assert.stringify(props) + ' supplied to interface(props, [options]) combinator (expected a dictionary String -> Type)';
      });
      assert(isTypeName(name), function () {
        return 'Invalid argument name ' + assert.stringify(name) + ' supplied to interface(props, [options]) combinator (expected a string)';
      });
      assert(isBoolean(strict), function () {
        return 'Invalid argument strict ' + assert.stringify(strict) + ' supplied to struct(props, [options]) combinator (expected a boolean)';
      });
    }

    var displayName = name || getDefaultInterfaceName(props);
    var identity = Object.keys(props).map(function (prop) {
      return props[prop];
    }).every(isIdentity);

    function Interface(value, path) {
      if (process.env.NODE_ENV === 'production') {
        if (identity) {
          return value;
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        path = path || [displayName];
        assert(!isNil(value), function () {
          return 'Invalid value ' + value + ' supplied to ' + path.join('/');
        });

        if (strict) {
          for (var k in value) {
            assert(props.hasOwnProperty(k), function () {
              return 'Invalid additional prop "' + k + '" supplied to ' + path.join('/');
            });
          }
        }
      }

      var idempotent = true;
      var ret = identity ? {} : assign({}, value);

      for (var prop in props) {
        var expected = props[prop];
        var actual = value[prop];
        var instance = create(expected, actual, process.env.NODE_ENV !== 'production' ? path.concat(prop + ': ' + getTypeName(expected)) : null);
        idempotent = idempotent && actual === instance;
        ret[prop] = instance;
      }

      if (idempotent) {
        ret = value;
      }

      if (process.env.NODE_ENV !== 'production') {
        Object.freeze(ret);
      }

      return ret;
    }

    Interface.meta = {
      kind: 'interface',
      props: props,
      name: name,
      identity: identity,
      strict: strict
    };
    Interface.displayName = displayName;

    Interface.is = function (x) {
      if (isNil(x)) {
        return false;
      }

      if (strict) {
        for (var k in x) {
          if (!props.hasOwnProperty(k)) {
            return false;
          }
        }
      }

      for (var prop in props) {
        if (!is(x[prop], props[prop])) {
          return false;
        }
      }

      return true;
    };

    Interface.update = function (instance, patch) {
      return Interface(assert.update(instance, patch));
    };

    Interface.extend = function (xs, name) {
      return extendInterface([Interface].concat(xs), name);
    };

    return Interface;
  }

  inter.strict = false;
  inter.getOptions = getOptions;
  inter.getDefaultName = getDefaultInterfaceName;
  inter.extend = extendInterface;
  module.exports = inter;
});